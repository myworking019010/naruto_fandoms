import config
import messages
import technique_type
import locations_map
import naruto_battlefield

import sqlite3
import json


import quests

import random

from datetime import datetime
import time

import telebot
from telebot import TeleBot, types, State

from pymongo import MongoClient
#from bson.objectid import ObjectId  
import bson
#–¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
from PIL import Image, ImageDraw, ImageFont, ImageOps
############################################
####### –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è exception #######
import sys
import logging
import linecache
############################################
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN_BOT)
print(bot.get_me())
from pymongo import MongoClient
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MongoDB
mongo_client = MongoClient(config.DB_URL)
db = mongo_client['narutofandom']
users_collection = db["users"]
characters_collection = db["characters"]
techniques_collection = db["techniques_list"]
quests_collection = db["quests"]
battle_collection = db["battle"]
mobs_collection = db["mobs"]


#–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ - /start, –ø—Ä–∏ –µ–µ –Ω–∞–∂–∞—Ç–∏–∏ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç - —Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏ –≤—ã–≤–æ–¥–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ä–æ—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å–∏—Å—Ç–µ–º—ã —Ñ–∞–Ω–¥–æ–º–æ–≤. –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –¥—Ä—É–≥–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
@bot.message_handler(commands=['start'])
def start_handler(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = users_collection.find_one({"telegram_id": message.chat.id})
        
        
        
        if user:
            # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ start
            markup_start = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=False)
            markup_start.row('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üó∫Ô∏è –ö–≤–µ—Å—Ç—ã')
            markup_start.row('üö∂‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
            markup_start.row('üìÑ –°–ø—Ä–∞–≤–∫–∞')
            markup_start.row('–°–∏–º—É–ª—è—Ü–∏—è –±–æ—è TEST APLHA')
            #markup_start.row('üó∫Ô∏è –¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏')
            #markup_start.row('–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –≤ –ë–î')
        
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î, –≤—ã–≤–æ–¥–∏–º –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(message.chat.id, messages.ALREADY_REGISTERED_MESSAGE.format(message.from_user.first_name), reply_markup = markup_start)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–µ–º –≤ –ë–î –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_user = {
                "telegram_id": message.chat.id,
                "username": message.chat.username,
                "first_name": message.chat.first_name,
                "last_name": message.chat.last_name,
                "registration_date": datetime.now()
            }
            users_collection.insert_one(new_user)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
            reply_markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(text="üÜï –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã", callback_data="fill_registration[1]_choose_country")
            reply_markup.add(button1)
            
            bot.send_message(message.chat.id, messages.NEW_USER_MESSAGE, reply_markup=reply_markup)
    except:
        PrintException()
        bot.send_message(message.chat.id, '–ö–∞–∫–∏–µ-—Ç–æ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')














# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
@bot.message_handler(regexp='–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –≤ –ë–î')
def add_technique_to_sqlite(message):
    msg = bot.send_message(message.chat.id, f"–°–∫–∏–¥—ã–≤–∞–π —Å—Ç—Ä–æ—á–∫—É")
    bot.register_next_step_handler(msg, add_technique_to_sqlite_step)


def add_technique_to_sqlite_step(message):
    technique_data = json.loads(message.text)
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
    _id = technique_data['_id']['$oid']
    elements = ', '.join(technique_data['elements'])
    jutsu_type = technique_data['jutsu_type']
    type = ', '.join(technique_data['type'])
    description = technique_data['description']
    gif = technique_data.get('jpeg', '') # –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    gif = technique_data.get('gif', '') # –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    name = technique_data['name']
    rank = technique_data['rank']
    
    conn = sqlite3.connect('main.db')
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç cur
    cur = conn.cursor()
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É techniques
    cur.execute(f"INSERT INTO techniques (_id, elements, jutsu_type, type, description, gif, name, rank) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                (_id, elements, jutsu_type, type, description, gif, name, rank))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    conn.commit()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()
    
    bot.send_message(message.chat.id, f'–°–æ—Ö—Ä–∞–Ω–∏–ª –π–æ–ø—Ç–∞')
    









# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∏—Ç–≤ | –Ω–∞—á–∞–ª–æ
@bot.message_handler(regexp='–°–∏–º—É–ª—è—Ü–∏—è –±–æ—è TEST APLHA')
def start_simulation(message):
    user = users_collection.find_one({"telegram_id": message.from_user.id})
    character = characters_collection.find_one({"telegram_id": message.from_user.id})
    if not user:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    reply_markup = types.InlineKeyboardMarkup()       
    button_1 = types.InlineKeyboardButton(text=f'‚û°Ô∏è –ù–∞—á–∞—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –±–æ—è', callback_data=f"start_battle_simulation")
    reply_markup.add(button_1)
            
    bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:', reply_markup = reply_markup)
    #bot.register_next_step_handler(msg, start_battle_create_location, opponents_list)
    pass


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ start_battle_simulation
@bot.callback_query_handler(func=lambda call: call.data.startswith('start_battle_simulation'))
def start_battle_simulation_callback(call):
    user = users_collection.find_one({"telegram_id": call.message.chat.id})
    user_character = characters_collection.find_one({"telegram_id": call.message.chat.id})
    if not user:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    
    characters = list(characters_collection.find())
    player_character_id = user_character["telegram_id"]
    
    battle_id = naruto_battlefield.create_battle_and_record_to_db(call.message.chat.id)
    
    reply_markup = types.InlineKeyboardMarkup()
    for character in characters:
        if character['telegram_id'] == player_character_id:
            continue
        button_text = f"{character['name']}"
        callback_data = f"[SIMBAT]_CO:{str(character['telegram_id'])}:{battle_id}_check"
        button = types.InlineKeyboardButton(text=button_text, callback_data=callback_data)
        reply_markup.add(button)

    bot.edit_message_text('‚ô®Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –±–æ—è:', call.message.chat.id, call.message.message_id, reply_markup=reply_markup)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('[SIMBAT]_CO'))
def select_opponent_callback(call):
    battle_id = call.data.split(':')[2]
    battle_id = battle_id.split('_')[0]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –±–æ–µ
    current_battle = battle_collection.find_one({"_id": bson.ObjectId(battle_id)})
    if not current_battle:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏—é
    user = users_collection.find_one({"telegram_id": call.message.chat.id})
    user_character = characters_collection.find_one({"telegram_id": call.message.chat.id})
    if not user:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    list_of_opponents = current_battle["list_of_opponents"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ø–æ–Ω–µ–Ω—Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    opponent_id = int(call.data.split(":")[1])
    opponent = characters_collection.find_one({"telegram_id": opponent_id})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤
    opponent_found = False
    for team in list_of_opponents:
        for player in team["players"]:
            if int(player["player_id"]) == opponent_id:
                team["players"].remove(player)
                opponent_found = True
                break
        if opponent_found:
            break

    # –ï—Å–ª–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if not opponent_found:
        new_battle = naruto_battlefield.add_opponent_to_battle(opponent_id, battle_id)
    
    
    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–º–µ–Ω–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —ç–º–æ–¥–∑–∏
    characters = list(characters_collection.find())
    player_character_id = user_character["telegram_id"]
    
    reply_markup = types.InlineKeyboardMarkup()
    for character in characters:
        if character['telegram_id'] == player_character_id:
            continue
        
        button_text = f"{character['name']}"
        callback_data = f"[SIMBAT]_CO:{str(character['telegram_id'])}:{battle_id}_check"
        # –û—Ç–º–µ—á–∞–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–µ–ª–µ–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã
        opponent_already_chosen = False
        for team in list_of_opponents:
            for player in team["players"]:
                if int(player["player_id"]) == character["telegram_id"]:
                    button_text += " ‚úÖ"
                    opponent_already_chosen = True
                    break
            if opponent_already_chosen:
                break
        
        button = types.InlineKeyboardButton(text=button_text, callback_data=callback_data)
        reply_markup.add(button)

    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=reply_markup)





""" # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith('[SIMBAT]_CO:'))
def toggle_opponent_callback(call):
    # –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    _, opponent_id, battle_id, _ = call.data.split(':')

    current_battle = battle_collection.find_one({"_id": bson.ObjectId(battle_id)})

    if 'check' in call.data:
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
        new_battle = naruto_battlefield.add_opponent_to_battle(opponent_id, battle_id)
        list_of_opponents = new_battle["list_of_opponents"]
    elif 'uncheck' in call.data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫–∞ –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
        for team in current_battle["list_of_opponents"]:
            for player in team["players"]:
                if player["player_id"] == opponent_id:
                    # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
                    new_battle = naruto_battlefield.delete_opponent_from_battle(opponent_id, battle_id)
                    list_of_opponents = new_battle["list_of_opponents"]
        

    # Create a list of all characters except the current user
    characters = list(characters_collection.find({"telegram_id": {"$ne": call.from_user.id}}))

    # Create a keyboard markup with buttons for all characters
    reply_markup = types.InlineKeyboardMarkup()
    for char in characters:
        is_participant = False
        for team in list_of_opponents:
            for player in team['players']:
                if char['telegram_id'] == player['player_id']:
                    is_participant = True
                    break
            if is_participant:
                break

        if is_participant:
            emodji = '‚úÖ'
            callback_data = f"[SIMBAT]_choose_opponent:{str(char['telegram_id'])}:{battle_id}"
        else:
            emodji = '‚≠ïÔ∏è'
            callback_data = f"[SIMBAT]_choose_opponent:{str(char['telegram_id'])}:{battle_id}"
 
        button_text = f"{emodji} {char['name']}"
        button = types.InlineKeyboardButton(text=button_text, callback_data=callback_data)
        reply_markup.add(button)

    # Add "Start Battle" button
    button_text = '–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω, –Ω–∞—á–∞—Ç—å –±–æ–π'
    callback_data = f'simulation_battle_start_battle:{battle_id}'
    button = types.InlineKeyboardButton(text=button_text, callback_data=callback_data)
    reply_markup.add(button)

    # Edit the message with the updated keyboard markup
    bot.edit_message_text('‚ô®Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –±–æ—è:', call.message.chat.id, call.message.message_id, reply_markup=reply_markup) """



@bot.callback_query_handler(func=lambda call: call.data.startswith('simulation_battle_start_battle'))
def start_battle_callback(call):
    curernt_battle_id = call.data.replace('simulation_battle_start_battle:', '')
    current_battle = battle_collection.find_one({"_id": bson.ObjectId(curernt_battle_id)})
    selected_characters = current_battle["list_of_opponents"]
    print(selected_characters)
    #selected_characters = call.data.replace('simulation_battle_start_battle:', '').split(',')
    if len(selected_characters) < 2:
        bot.answer_callback_query(callback_query_id=call.id, text="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤—É—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!")
        return
        # –ù–∞—á–∞–ª–æ –±–∏—Ç–≤—ã
    else:
        num_of_opponents = len(selected_characters)
        opponents_list = selected_characters

        bot.delete_message(call.message.chat.id, call.message.message_id)
        start_battle_create_location(call.message, num_of_opponents, opponents_list, current_battle)

    # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    selected_characters = []




# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–∫–∞ –ª–µ—Å–∞ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞
def create_forest(x, y, width, height, battle_field):
    # –µ—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –∏–ª–∏ –≤—ã—Å–æ—Ç–∞ —É—á–∞—Å—Ç–∫–∞ –ª–µ—Å–∞ –º–µ–Ω—å—à–µ 3, —Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
    if width < 3 or height < 3:
        return

    # —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º, –∫–∞–∫—É—é –ª–∏–Ω–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
    if random.random() < 0.5:
        # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
        wall_y = random.randint(y+1, y+height-2)

        # —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ –≤ –≥—Ä—É–ø–ø–µ
        num_trees = random.randint(5, 15)

        # —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –≤ –≥—Ä—É–ø–ø–µ
        for i in range(num_trees):
            tree_x = random.randint(x+1, x+width-2)
            tree_y = random.randint(wall_y-num_trees+1, wall_y-1)
            battle_field[tree_y][tree_x]['object'] = 'tree_1'

        # —Å–æ–∑–¥–∞–µ–º –¥–≤–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–∫–∞ –ª–µ—Å–∞
        create_forest(x, y, width, wall_y-y, battle_field)
        create_forest(x, wall_y+1, width, y+height-wall_y-1, battle_field)

    else:
        # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
        wall_x = random.randint(x+1, x+width-2)

        # —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ –≤ –≥—Ä—É–ø–ø–µ
        num_trees = random.randint(5, 15)

        # —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –≤ –≥—Ä—É–ø–ø–µ
        for i in range(num_trees):
            tree_x = random.randint(wall_x-num_trees+1, wall_x-1)
            tree_y = random.randint(y+1, y+height-2)
            battle_field[tree_y][tree_x]['object'] = 'tree_2'

        # —Å–æ–∑–¥–∞–µ–º –¥–≤–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–∫–∞ –ª–µ—Å–∞
        create_forest(x, y, wall_x-x, height, battle_field)
        create_forest(wall_x+1, y, x+width-wall_x-1, height, battle_field)
    
    return battle_field



# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –∫–∞—Ä—Ç—ã, –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –¥–æ—Ä–æ–≥–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª–µ –±–æ—è, 
# –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–æ—Ä–æ–≥—É. –§—É–Ω–∫—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è 
# –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –Ω–∞ –∫–∞–∂–¥—É—é –∫–ª–µ—Ç–∫—É –¥–æ—Ä–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã –∏–ª–∏ 
# –Ω–µ –≤—ã–π–¥–µ—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è –±–æ—è. –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –∫–ª–µ—Ç–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ø–æ–ª—è –±–æ—è, 
# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Ä–æ–≥–∏ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è.
def create_roads(x, y, battle_field):
    num_roads = random.randint(3, 7)
    roads = []
    for i in range(num_roads):
        # –¥–ª–∏–Ω–∞ –∏ —à–∏—Ä–∏–Ω–∞ –¥–æ—Ä–æ–≥–∏ —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º–∏
        length = random.randint(5, 15)
        width = random.randint(1, 3)

        # –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –∫–∞—Ä—Ç—ã
        curr_x, curr_y = x, y

        # —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        direction = random.choice([(0, 1), (0, -1), (1, 0), (-1, 0)])

        # –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
        for j in range(length):
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è –∫–ª–µ—Ç–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è –±–æ—è
            if 0 <= curr_x+direction[0] < len(battle_field) and 0 <= curr_y+direction[1] < len(battle_field[0]):
                # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ —Ç–µ–∫—É—â—É—é –∫–ª–µ—Ç–∫—É –¥–æ—Ä–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç
                battle_field[curr_x][curr_y]['object'] = 'road'
                # –ø–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ —Å–ª–µ–¥—É—é—â—É—é –∫–ª–µ—Ç–∫—É
                curr_x += direction[0]
                curr_y += direction[1]
            else:
                # –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –∫–ª–µ—Ç–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ø–æ–ª—è –±–æ—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ—Ä–æ–≥–∏
                break

        # –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ä–æ–≥—É –≤ —Å–ø–∏—Å–æ–∫
        roads.append((x, y, length, width))

    return battle_field



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–Ω–µ–π –Ω–∞ –ø–æ–ª–µ –±–æ—è
def create_stones(num_stones, battle_field):
    # –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª—è –±–æ—è
    rows = len(battle_field)
    cols = len(battle_field[0])
    # —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π
    for i in range(num_stones):
        # —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞–º–Ω—è
        stone_row = random.randint(0, rows-1)
        stone_col = random.randint(0, cols-1)

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if 'object' in battle_field[stone_row][stone_col] and battle_field[stone_row][stone_col]['object'] == None:
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É –∫–∞–º–µ–Ω—å
            battle_field[stone_row][stone_col]['object'] = 'rock'
    
    return battle_field




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∏—Ç–≤ | —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –±–æ—è
import numpy as np

def start_battle_create_location(message, num_of_opponents, opponents_list, current_battle):
    cell_size = (50, 50)
    image_size = (15*cell_size[0], 15*cell_size[1])
    battle_field = []

    current_battle_id = current_battle["_id"]

    for y in range(15):
        row = []
        for x in range(15):
            row.append({'x': x, 'y': y, 'object': None}) # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á 'object' –≤ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
        battle_field.append(row)


    print('test 387 hey')
    # —Å–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–∫–∏ –ª–µ—Å–∞ —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è
    battle_field = create_forest(0, 0, 14, 14, battle_field)

    # —Å–æ–∑–¥–∞–µ–º –¥–æ—Ä–æ–≥—É —Å –ø–æ–º–æ—â—å—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–ª—É–∂–¥–∞–Ω–∏—è
    battle_field = create_roads(8, 8, battle_field)

    # —Å–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–æ–∫ –∫–∞–º–Ω–µ–π
    num_of_stones = random.randint(3, 8)
    battle_field = create_stones(num_of_stones, battle_field)
    

    # –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏ –º–æ–±–æ–≤
    player_positions = []
    for team in opponents_list:
        for player in team["players"]:
            if 'player_id' in player:
                # —Å–ª—É—á–∞–π–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
                while True:
                    player_x, player_y = (random.randint(0, 14), random.randint(0, 14))
                    if 'object' in battle_field[player_y][player_x] and battle_field[player_y][player_x]['object'] is None:
                        break
                player_positions.append((player_x, player_y))
                battle_field[player_y][player_x]['object'] = f'player_{player["player_id"]}'
            elif 'mob_id' in player:
                # —Å–ª—É—á–∞–π–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –º–æ–±–∞
                while True:
                    mob_x, mob_y = (random.randint(0, 14), random.randint(0, 14))
                    if battle_field[mob_y][mob_x]['object'] is None:
                        break
                player_positions.append((mob_x, mob_y))
                battle_field[mob_y][mob_x]['object'] = 'mob'

    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –±–æ–µ (battle field) –≤ –ë–î
    battle_collection.update_one({"_id": bson.ObjectId(current_battle_id)}, {"$set": {"battle_field": battle_field}})
    
    # —Å–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.new('RGBA', image_size, (0, 0, 0, 0))
    draw = ImageDraw.Draw(image)


    STATS_rock = 0
    STATS_tree = 0
    STATS_building = 0
    # —Ä–∏—Å—É–µ–º –∫–ª–µ—Ç–∫–∏ –∏ –æ–±—ä–µ–∫—Ç—ã
    for y in range(15):
        for x in range(15):
            cell = battle_field[y][x]
            if 'object' in cell:
                object_type = cell['object']

                if object_type == 'rock':
                    STATS_rock += 1
                elif object_type == 'tree_1' or object_type == 'tree_2':
                    STATS_tree += 1
                elif object_type == 'building':
                    STATS_building += 1

                object_image_path = f'./images_resources/battle_field_grass.png'
                object_image = Image.open(object_image_path).convert('RGBA')
                object_image = object_image.resize(cell_size, resample=Image.LANCZOS)
                # —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                angle = random.choice([90, 180])
                # –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                object_image = object_image.rotate(angle, expand=True)
                image.alpha_composite(object_image, dest=(x*cell_size[0], y*cell_size[1]))

                if object_type == None:
                    continue
                else:
                    if "player" in object_type:
                        object_type = object_type.split('_')[0]
                    object_image_path = f'./images_resources/battle_field_{object_type}.png'
                    object_image = Image.open(object_image_path).convert('RGBA')
                    # invert alpha channel
                    alpha = object_image.getchannel('A')
                    inverted_alpha = alpha.point(lambda x: 255 - x)
                    # set inverted alpha as new alpha channel
                    object_image.putalpha(alpha)
                    object_image = object_image.resize(cell_size, resample=Image.LANCZOS)
                    image.alpha_composite(object_image, dest=(x*cell_size[0], y*cell_size[1]))
            else:
                draw.rectangle([(x*cell_size[0], y*cell_size[1]), ((x+1)*cell_size[0], (y+1)*cell_size[1])], fill=(128, 128, 128), outline=(0, 0, 0))

    reply_markup = types.InlineKeyboardMarkup()
    button_1 = types.InlineKeyboardButton(text=f'üò° –ù–∞—á–∞—Ç—å –±–æ–π!', callback_data=f"start_battle:{current_battle_id}")
    reply_markup.add(button_1)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    image_path = 'battle_field.png'
    image.save(image_path)
    with open(image_path, 'rb') as image_file:
        photo = bot.send_photo(message.chat.id, image_file, caption = f'–û–±—å–µ–∫—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ:\nü™® –ö–∞–º–µ–Ω—å - {STATS_rock}\nüå≤ –î–µ—Ä–µ–≤–æ - {STATS_tree}\nüèØ –ó–¥–∞–Ω–∏–µ - {STATS_building}\n\n', reply_markup=reply_markup)
        photo_id = photo.photo[-1].file_id
        battle_collection.update_one({"_id": bson.ObjectId(current_battle_id)}, {"$set": {"image": photo_id}})

    # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    os.remove(image_path)



@bot.callback_query_handler(func=lambda call: call.data.startswith('start_battle:'))
def choose_type_of_battle_callback(call):
    user = users_collection.find_one({"telegram_id": call.message.chat.id})
    character = characters_collection.find_one({"telegram_id": call.message.chat.id})
    if not user:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    
    battle_id = call.data.replace('start_battle:', '')
    current_battle = battle_collection.find_one({"_id": bson.ObjectId(battle_id)})

    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–∏—Ç–∏–∞—Ç–∏–≤—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    initiative_scores = {}
    for team in current_battle['list_of_opponents']:
        for player in team["players"]:
            character = characters_collection.find_one({"telegram_id": player['player_id']})
            if character:
                initiative = character["characteristics"][0]['dexterity'] + character["characteristics"][0]['speed'] + character["characteristics"][0]['luck']
                initiative_scores[player['player_id']] = initiative

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –∏–Ω–∏—Ç–∏–∞—Ç–∏–≤–µ
    sorted_initiatives = sorted(initiative_scores.items(), key=lambda x: x[1], reverse=True)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    first_player_id = sorted_initiatives[0][0]

    reply_markup = types.InlineKeyboardMarkup()
    button_1 = types.InlineKeyboardButton(text=f'–í–≤–µ—Ä—Ö', callback_data=f"[BATTLE]:{battle_id}:move_up")
    button_2 = types.InlineKeyboardButton(text=f'–í–Ω–∏–∑', callback_data=f"[BATTLE]:{battle_id}:move_down")
    button_3 = types.InlineKeyboardButton(text=f'–í–ø—Ä–∞–≤–æ', callback_data=f"[BATTLE]:{battle_id}:move_right")
    button_4 = types.InlineKeyboardButton(text=f'–í–ª–µ–≤–æ', callback_data=f"[BATTLE]:{battle_id}:move_left")
    button_5 = types.InlineKeyboardButton(text=f'–ù–∞–≤—ã–∫', callback_data=f"[BATTLE]:{battle_id}:use_skill")
    button_6 = types.InlineKeyboardButton(text=f'–ü—Ä–µ–¥–º–µ—Ç', callback_data=f"[BATTLE]:{battle_id}:use_item")
    button_7 = types.InlineKeyboardButton(text=f'–û—Ç–º–µ–Ω–∞', callback_data=f"[BATTLE]:{battle_id}:cancel_battle")
    reply_markup.add(button_1)
    reply_markup.add(button_2)
    reply_markup.add(button_3)
    reply_markup.add(button_4)
    reply_markup.add(button_5)
    reply_markup.add(button_6)
    reply_markup.add(button_7)

    info_about_battle = f'–ë–æ–π –Ω–∞—á–∞–ª—Å—è! –ü–µ—Ä–≤—ã–º —Ö–æ–¥ —Å–æ–≤–µ—Ä—à–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ {characters_collection.find_one({"telegram_id": first_player_id})["name"]}\n\n–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n'
    for i, team in enumerate(current_battle['list_of_opponents']):
        info_about_battle += f"\n–ö–æ–º–∞–Ω–¥–∞ {i + 1}: {team['team_name']}"
        for player in team["players"]:
            character = characters_collection.find_one({"telegram_id": player['player_id']})
            if character:
                info_about_battle += f"\n- {character['name']}"
            else:
                info_about_battle += f"\n- –ò–≥—Ä–æ–∫ —Å id {player['player_id']}"

    bot.delete_message(call.message.chat.id, call.message.message_id)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –ø–æ–µ–¥–∏–Ω–∫–µ
    for team in current_battle['list_of_opponents']:
        for player in team["players"]:
            if 'player_id' in player:
                bot.send_photo(player["player_id"], current_battle["image"], caption=info_about_battle, reply_markup=reply_markup)










@bot.callback_query_handler(func=lambda call: call.data.startswith('[BATTLE]:'))
def handle_battle_callback(call):
    _, battle_id, action = call.data.split(':')
    user = users_collection.find_one({"telegram_id": call.message.chat.id})
    character = characters_collection.find_one({"telegram_id": call.message.chat.id})
    current_battle = battle_collection.find_one({"_id": bson.ObjectId(battle_id)})

    print(character)
    print(current_battle)

    if not user:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    if action == 'move_up':
        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–≤–µ—Ä—Ö
        move_player(character, "up", current_battle)

    elif action == 'move_down':
        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–Ω–∏–∑
        move_player(character, "down", current_battle)

    elif action == 'move_right':
        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø—Ä–∞–≤–æ
        move_player(character, "right", current_battle)

    elif action == 'move_left':
        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–ª–µ–≤–æ
        move_player(character, "left", current_battle)

    elif action == 'use_skill':
        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞
        skill_id = get_skill_id_from_player_menu(current_battle, character)
        use_skill(character, skill_id, current_battle)

    elif action == 'use_item':
        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
        item_id = get_item_id_from_player_menu(current_battle, character)
        use_item(character, item_id, current_battle)

    elif action == 'cancel':
        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
        cancel_action(character, current_battle)

    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")



def get_current_position(character, current_battle):
    for row in current_battle["battle_field"]:
        for cell in row:
            if "player" in cell["object"]:
                player_id = cell["object"].replace("player_", "")
                if player_id == character["telegram_id"]:
                    return {"x": cell["x"], "y": cell["y"]}


def update_character_position(character, current_battle, new_x, new_y):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–æ–µ–≤–æ–π —Å–µ—Å—Å–∏–∏."""
    for team in current_battle["list_of_opponents"]:
        for player in team["players"]:
            if player["player_id"] == character["telegram_id"]:
                player["x"], player["y"] = new_x, new_y
                break
    else:
        # –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        current_battle["list_of_opponents"][0]["players"].append({
            "player_id": character["telegram_id"],
            "x": new_x,
            "y": new_y,
            "start_battle": False
        })




def move_player(character, direction, current_battle):
    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    current_position = get_current_position(character, current_battle)
    x, y = current_position["x"], current_position["y"]

    # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if direction == "up":
        new_x, new_y = x, y - 1
    elif direction == "down":
        new_x, new_y = x, y + 1
    elif direction == "right":
        new_x, new_y = x + 1, y
    elif direction == "left":
        new_x, new_y = x - 1, y

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è –±–æ—è
    if new_x < 0 or new_y < 0 or new_x >= len(current_battle["battle_field"][0]) or new_y >= len(current_battle["battle_field"]):
        bot.send_message(character["telegram_id"], "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")
        return

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –Ω–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –Ω–µ—Ç –¥—Ä—É–≥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    new_position = current_battle["battle_field"][new_y][new_x]
    if new_position["object"] is not None:
        bot.send_message(character["telegram_id"], "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —ç—Ç—É –∫–ª–µ—Ç–∫—É.")
        return

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    update_character_position(character, current_battle, new_x, new_y)

    # —Å–æ–æ–±—â–∞–µ–º –∏–≥—Ä–æ–∫–∞–º –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    #update_battle_message(current_battle)





















#–º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–∑–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
def give_basic_quests_to_character(player_telegram_id):
    character = characters_collection.find_one({'telegram_id': player_telegram_id})
    quests_player_info = quests_collection.find_one({'telegram_id': player_telegram_id})

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –Ω–µ –ø—É—Å—Ç–æ–π
    #if not quests_player_info['list_of_active_quests']:
      #  quests_player_info['list_of_active_quests'] = []

    for quest_name, quest_data in quests.base_quests.items():
        if 'character_registration_flag' in quest_data['conditions_to_accepting']:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–≤–µ—Å—Ç –µ—â–µ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
            if not any(q['name'] == quest_name for q in quests_player_info['list_of_active_quests']):
                # –¥–æ–±–∞–≤–ª—è–µ–º –∫–≤–µ—Å—Ç –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                new_quest = {
                    'name': quest_name,
                    'quest_id': bson.ObjectId()
                }
                quests_player_info['list_of_active_quests'].append(new_quest)
    
    # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ë–î
    quests_collection.update_one({'telegram_id': player_telegram_id}, {'$set': quests_player_info})














# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ fill_registration
@bot.callback_query_handler(func=lambda call: call.data.startswith('fill_registration'))
def fill_registration_callback(call):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
    if call.data.startswith('fill_registration[1]'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        character = characters_collection.find_one({"telegram_id": call.message.chat.id})
        
        if character:
            bot.edit_message_text(f'‚ÄºÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂!', call.message.chat.id, call.message.message_id)
        else:
            if call.data.startswith('fill_registration[1]_choose_country'):
                # C–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_character = {
                    "telegram_id": call.message.chat.id,
                    "username": call.message.chat.username,
                    "country": 'NoneYet',
                    "name": 'NoneYet',
                    "level": 1,
                    "current_exp": 0,
                    "lvlup_exp": 100,
                    "money": 0,
                    "gender": 'NoneYet',
                    "biography": 'NoneYet',
                    "element": 'NoneYet',
                    "basic_jutsu": 'NoneYet',
                    "shinobi_rank": 'NoneYet',
                    "current_location": "NoneYet",
                    
                    "characteristics": [{
                    "atack": 1,
                    "defense": 1,
                    "health": 100,
                    "chakra": 100,
                    "speed": 1,
                    "dexterity": 1,
                    "critical_chance": 1,
                    "luck": 1
                    }],
                    "inventory": [{
                        "–ö–∞–º–µ–Ω—å": [{
                            "count": 5,
                            "description": "–û–±—ã—á–Ω—ã–π –∫–∞–º–µ–Ω—å, –º–æ–∂–Ω–æ –æ—Ç–ø—É–≥–∏–≤–∞—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö",
                            "id": bson.ObjectId()
                        }]
                    }]
                }
                characters_collection.insert_one(new_character)

                quests_for_character = {
                    "telegram_id": call.message.chat.id,
                    "number_of_completed_dailies": 0,
                    "number_of_completed_quests": 0,
                    "list_of_active_dailies": [],
                    "list_of_active_quests": []
                }
                quests_collection.insert_one(quests_for_character)
                #–î–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞
                give_basic_quests_to_character(call.message.chat.id)

                reply_markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton(text="üåê–°—Ç—Ä–∞–Ω–∞ –í–µ—Ç—Ä–∞", callback_data=f'fill_registration[2]_wind')
                button2 = types.InlineKeyboardButton(text="‚Äçüåê–°—Ç—Ä–∞–Ω–∞ –í–æ–¥—ã", callback_data=f'fill_registration[2]_water')
                button3 = types.InlineKeyboardButton(text="üåê–°—Ç—Ä–∞–Ω–∞ –ó–µ–º–ª–∏", callback_data=f'fill_registration[2]_earth')
                button4 = types.InlineKeyboardButton(text="üåê–°—Ç—Ä–∞–Ω–∞ –ú–æ–ª–Ω–∏–∏", callback_data=f'fill_registration[2]_lightning')
                button5 = types.InlineKeyboardButton(text="üåê–°—Ç—Ä–∞–Ω–∞ –û–≥–Ω—è", callback_data=f'fill_registration[2]_fire')
                reply_markup.add(button1)
                reply_markup.add(button2)
                reply_markup.add(button3)
                reply_markup.add(button4)
                reply_markup.add(button5)
                
                bot.send_message(call.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É. –û—Ç –µ–µ –≤—ã–±–æ—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –∫–∞–∫—É—é –¥–µ—Ä–µ–≤–Ω—é –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å. –í—ã–±–æ—Ä –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.', reply_markup = reply_markup)
    if call.data.startswith('fill_registration[2]'):
        choosen_country = call.data.replace('fill_registration[2]_', '')
        
        characters_collection.update_one({"telegram_id": call.message.chat.id}, {"$set": {"country": choosen_country, "current_location": f"{choosen_country}_country"}})
        
        reply_markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(text="üé≤ –ü—É—Å—Ç—å —Å—É–¥—å–±–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–≤–æ—é —Å—Ç–∏—Ö–∏—é", callback_data=f'fill_registration[3]_get_random_element')
        reply_markup.add(button1)
        
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç—Ä–∞–Ω—É {choosen_country}\n\n–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∏–º —Ç–∏–ø–æ–º —á–∞–∫—Ä—ã –±—É–¥–µ—Ç –æ–±–ª–∞–¥–∞—Ç—å —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂. –°—É—â–µ—Å—Ç–≤—É–µ—Ç 5 –±–∞–∑–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ —á–∞–∫—Ä—ã:\n–°—Ç–∏—Ö–∏—è –í–µ—Ç—Ä–∞\n–°—Ç–∏—Ö–∏—è –í–æ–¥—ã\n–°—Ç–∏—Ö–∏—è –ó–µ–º–ª–∏\n–°—Ç–∏—Ö–∏—è –ú–æ–ª–Ω–∏–∏\n–°—Ç–∏—Ö–∏—è –û–≥–Ω—è\n\n–¢–∞–∫–∂–µ, —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Å—Ç–∏—Ö–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–æ–º–∞. –≠—Ç–æ –æ—Å–æ–±—ã–π —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–≤–æ–µ–π –±–∞–∑–æ–≤–æ–π —Å—Ç–∏—Ö–∏–∏:', reply_markup = reply_markup)
    if call.data.startswith('fill_registration[3]'):
        bot.edit_message_text(call.message.text, call.message.chat.id, call.message.message_id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±—Ä–æ—Å–∫–æ–º –∫—É–±–∏–∫–∞
        dice_message = bot.send_dice(call.message.chat.id)
        dice_value = dice_message.dice.value
        element = None
        
         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏—Ö–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–∞
        if dice_value == 1:
            element = "water"
            element_text = "üíß –í–æ–¥–∞"
        elif dice_value == 2:
            element = "earth"
            element_text = "üóø –ó–µ–º–ª—è"
        elif dice_value == 3:
            element = "fire"
            element_text = "üî• –û–≥–æ–Ω—å"
        elif dice_value == 4:
            element = "wind"
            element_text = "üí® –í–µ—Ç–µ—Ä"
        elif dice_value == 5:
            element = "lightning"
            element_text = "‚ö°Ô∏è –ú–æ–ª–Ω–∏—è"
            
        
            
        elif dice_value == 6:
            # –ü—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è 6
            
            reply_markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(text="üíß –í–æ–¥–∞", callback_data=f'fill_registration[3_1]_water')
            button2 = types.InlineKeyboardButton(text="üóø –ó–µ–º–ª—è", callback_data=f'fill_registration[3_1]_earth')
            button3 = types.InlineKeyboardButton(text="üî• –û–≥–æ–Ω—å", callback_data=f'fill_registration[3_1]_fire')
            button4 = types.InlineKeyboardButton(text="üí® –í–µ—Ç–µ—Ä", callback_data=f'fill_registration[3_1]_wind')
            button5 = types.InlineKeyboardButton(text="‚ö°Ô∏è –ú–æ–ª–Ω–∏—è", callback_data=f'fill_registration[3_1]_lightning')
            reply_markup.add(button1)
            reply_markup.add(button2)
            reply_markup.add(button3)
            reply_markup.add(button4)
            reply_markup.add(button5)
            
            
            
            bot.send_message(call.message.chat.id, "–¢–µ–±–µ –≤—ã–ø–∞–ª–æ 6! –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏—Ö–∏—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. –í—ã–±–æ—Ä –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.", reply_markup=reply_markup)
        
        if element is not None:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∏—Ö–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            characters_collection.update_one({"telegram_id": call.message.chat.id}, {"$set": {"element": element}})
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∏—Ö–∏–µ–π 
            reply_markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(text="–ù–∏–Ω–¥–∑—é—Ü—É", callback_data=f'fill_registration[4_1]_ninjutsu')
            button2 = types.InlineKeyboardButton(text="–¢–∞–π–¥–∑—é—Ü—É", callback_data=f'fill_registration[4_1]_taijutsu')
            button3 = types.InlineKeyboardButton(text="–ì–µ–Ω–¥–∑—é—Ü—É", callback_data=f'fill_registration[4_1]_genjutsu')
            reply_markup.add(button1)
            reply_markup.add(button2)
            reply_markup.add(button3)
            

            bot.send_message(call.message.chat.id, f"–¢–µ–±–µ –≤—ã–ø–∞–ª–æ {dice_value}! –¢–≤–æ—è —Å—Ç–∏—Ö–∏—è - {element_text}.{messages.REGISTRATION_CHOOSE_JUTSU_MESSAGE}", reply_markup=reply_markup)
        
    if call.data.startswith('fill_registration[3_1]'):    
        element = call.data.replace('fill_registration[3_1]_', '')
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∏—Ö–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        characters_collection.update_one({"telegram_id": call.message.chat.id}, {"$set": {"element": element}})
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∏—Ö–∏–µ–π
        reply_markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(text="–ù–∏–Ω–¥–∑—é—Ü—É", callback_data=f'fill_registration[4_1]_ninjutsu')
        button2 = types.InlineKeyboardButton(text="–¢–∞–π–¥–∑—é—Ü—É", callback_data=f'fill_registration[4_1]_taijutsu')
        button3 = types.InlineKeyboardButton(text="–ì–µ–Ω–¥–∑—é—Ü—É", callback_data=f'fill_registration[4_1]_genjutsu')
        reply_markup.add(button1)
        reply_markup.add(button2)
        reply_markup.add(button3)
        
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, f"–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä! –¢–≤–æ—è —Å—Ç–∏—Ö–∏—è - {element}.{messages.REGISTRATION_CHOOSE_JUTSU_MESSAGE}", reply_markup=reply_markup)
    
    if call.data.startswith('fill_registration[4_1]'):  
        bot.delete_message(call.message.chat.id, call.message.message_id)
        jutsu = call.data.replace('fill_registration[4_1]_', '')

        reply_markup = types.InlineKeyboardMarkup()
        
        if jutsu == 'ninjutsu':
            button1 = types.InlineKeyboardButton(text="–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data=f'fill_registration[4_2]_yes_ninjutsu')
            button2 = types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–∑—é—Ü—É", callback_data=f'fill_registration[4_2]_no')
            reply_markup.add(button1)
            reply_markup.add(button2)
            bot.send_message(call.message.chat.id, f"{messages.REGISTRATION_NINJUTSU_MESSAGE}\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø –¥–∑—é—Ü—É?", reply_markup=reply_markup)
        elif jutsu == 'genjutsu':
            button1 = types.InlineKeyboardButton(text="–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data=f'fill_registration[4_2]_yes_genjutsu')
            button2 = types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–∑—é—Ü—É", callback_data=f'fill_registration[4_2]_no')
            reply_markup.add(button1)
            reply_markup.add(button2)
            bot.send_message(call.message.chat.id, f"{messages.REGISTRATION_GENJUTSU_MESSAGE}\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø –¥–∑—é—Ü—É?", reply_markup=reply_markup)
        elif jutsu == 'taijutsu':
            button1 = types.InlineKeyboardButton(text="–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data=f'fill_registration[4_2]_yes_taijutsu')
            button2 = types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–∑—é—Ü—É", callback_data=f'fill_registration[4_2]_no')
            reply_markup.add(button1)
            reply_markup.add(button2)
            bot.send_message(call.message.chat.id, f"{messages.REGISTRATION_TAIJUTSU_MESSAGE}\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø –¥–∑—é—Ü—É?", reply_markup=reply_markup)
    if call.data.startswith('fill_registration[4_2]'):    
        confirm_or_not = call.data.replace('fill_registration[4_2]_', '')    
        if 'yes' in confirm_or_not:
            jutsu = confirm_or_not.replace('yes_', '')
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∑—é—Ü—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            characters_collection.update_one({"telegram_id": call.message.chat.id}, {"$set": {"basic_jutsu": jutsu}})
            
            reply_markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data=f'fill_registration[5_1]_woman')
            button2 = types.InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data=f'fill_registration[5_1]_man')
            reply_markup.add(button1)
            reply_markup.add(button2)
            bot.edit_message_text(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –±–∞–∑–æ–≤—ã–π —Ç–∏–ø –¥–∑—é—Ü—É - {jutsu}\n\n–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", call.message.chat.id, call.message.message_id, reply_markup = reply_markup)
        else:
            reply_markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(text="–ù–∏–Ω–¥–∑—é—Ü—É", callback_data=f'fill_registration[4_1]_ninjutsu')
            button2 = types.InlineKeyboardButton(text="–¢–∞–π–¥–∑—é—Ü—É", callback_data=f'fill_registration[4_1]_taijutsu')
            button3 = types.InlineKeyboardButton(text="–ì–µ–Ω–¥–∑—é—Ü—É", callback_data=f'fill_registration[4_1]_genjutsu')
            reply_markup.add(button1)
            reply_markup.add(button2)
            reply_markup.add(button3)
            
            bot.edit_message_text(f"{messages.REGISTRATION_CHOOSE_JUTSU_MESSAGE}", call.message.chat.id, call.message.message_id, reply_markup = reply_markup)
    if call.data.startswith('fill_registration[5_1]'):
        gender = call.data.replace('fill_registration[5_1]_', '')    
        
        reply_markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(text="–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data=f'fill_registration[5_2]_yes_{gender}')
        button2 = types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–ª", callback_data=f'fill_registration[5_2]_no')
        reply_markup.add(button1)
        reply_markup.add(button2)
        
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, f"–ü–æ–ª –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø–æ–ª?", reply_markup=reply_markup)
    if call.data.startswith('fill_registration[5_2]'):
        confirm_or_not = call.data.replace('fill_registration[5_2]_', '')    
        
        if 'yes' in confirm_or_not:
            #bot.delete_message(call.message.chat.id, call.message.message_id)
            gender = confirm_or_not.replace('yes_', '')
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∑—é—Ü—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            characters_collection.update_one({"telegram_id": call.message.chat.id}, {"$set": {"gender": gender}})
            msg = bot.send_message(call.message.chat.id, f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å! –ò–º—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –ò–º—è –§–∞–º–∏–ª–∏—è, —Ç–∞–∫ –∏ –Ω–∏–∫–Ω–µ–π–º—ã. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
            bot.register_next_step_handler(msg, register_choose_character_name_step)
        else:
            reply_markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data=f'fill_registration[5_1]_woman')
            button2 = types.InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data=f'fill_registration[5_1]_man')
            reply_markup.add(button1)
            reply_markup.add(button2)
            
            bot.edit_message_text(f"–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", call.message.chat.id, call.message.message_id, reply_markup = reply_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ | –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def register_choose_character_name_step(message):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    characters_collection.update_one({"telegram_id": message.chat.id}, {"$set": {"name": message.text}})
    
    reply_markup = types.InlineKeyboardMarkup()
    button_1 = types.InlineKeyboardButton(text="üìú –ú–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂", callback_data="show_my_character")
    reply_markup.add(button_1)
    
    bot.send_message(message.chat.id, f'–¢–≤–æ–µ –∏–º—è - {message.text}', reply_markup = reply_markup)
    pass














# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "üìú –ú–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂"
@bot.callback_query_handler(func=lambda call: call.data.startswith('show_my_character'))
def show_character(call):
    character = characters_collection.find_one({"telegram_id": call.message.chat.id})
    if not character:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ.")
        return
        
    name = character['name']
    level = character['level']
    current_exp = character['current_exp']
    lvlup_exp = character['lvlup_exp']
    money = character['money']
    
    
    country = character['country']
    if country == 'fire':
        country = '–°—Ç—Ä–∞–Ω–∞ –û–≥–Ω—è üî•'
    elif country == 'wind':
        country = '–°—Ç—Ä–∞–Ω–∞ –í–µ—Ç—Ä–∞ üí®'
    elif country == 'water':
        country = '–°—Ç—Ä–∞–Ω–∞ –í–æ–¥—ã üí¶'
    elif country == 'sound':
        country = 'C—Ç—Ä–∞–Ω–∞ –ó–≤—É–∫–∞ üîä'
    elif country == 'earth':
        country = '–°—Ç—Ä–∞–Ω–∞ –ó–µ–º–ª–∏ üå≥'
    elif country == 'lightning':
        country = '–°—Ç—Ä–∞–Ω–∞ –ú–æ–ª–Ω–∏–π ‚ö°Ô∏è'

    
    gender = character['gender']
    if gender == 'woman':
        gender = '–∂–µ–Ω—Å–∫–∏–π'
    elif gender == 'man':
        gender = '–º—É–∂—Å–∫–æ–π'
        
    
    element = character['element']
    if element == 'fire':
        element = 'üî• –û–≥–æ–Ω—å'
    elif element == 'water':
        element = 'üíß –í–æ–¥–∞'
    elif element == 'wind':
        element = 'üí® –í–µ—Ç–µ—Ä'
    elif element == 'earth':
        element = 'üå≥ –ó–µ–º–ª—è'
    elif element == 'lightning':
        element = '‚ö°Ô∏è –ú–æ–ª–Ω–∏—è'


    shinobi_rank = character['shinobi_rank']
    if shinobi_rank == 'NoneYet':
        shinobi_rank = '–ë–µ–∑ —Ä–∞–Ω–≥–∞'
    elif shinobi_rank == 'genin':
        shinobi_rank = '–ì–µ–Ω–∏–Ω'
    elif shinobi_rank == 'chuunin':
        shinobi_rank = '–ß—É—É–Ω–∏–Ω'
    elif shinobi_rank == 'jounin':
        shinobi_rank = '–î–∂–æ—É–Ω–∏–Ω'
    

    basic_jutsu = character['basic_jutsu']
    if basic_jutsu == 'ninjutsu':
        basic_jutsu = 'üåÄ –ù–∏–Ω–¥–∑—é—Ü—É'
    elif basic_jutsu == 'taijutsu':
        basic_jutsu = 'üí™ –¢–∞–π–¥–∂—É—Ç—Å—É'
    elif basic_jutsu == 'genjutsu':
        basic_jutsu = 'üëÅÔ∏è –ì–µ–Ω–¥–∑—é—Ü—É'


    current_location = character['current_location']

    
    biography = character['biography']
    if biography == 'NoneYet':
        biography = '[–ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç]'
    
    
    text = f"üìú –ò–º—è: {name}\nüåê {country}\nüë• –ü–æ–ª: {gender}\n‚ú® –°—Ç–∏—Ö–∏—è: {element}\nüèÖ –£—Ä–æ–≤–µ–Ω—å: {level}\nü•∑ –†–∞–Ω–≥ —à–∏–Ω–æ–±–∏: {shinobi_rank}\nüí• –û–ø—ã—Ç: {current_exp} –∏–∑ {lvlup_exp}\n\n"
    text += f"üí∞ –î–µ–Ω—å–≥–∏: {money} —Ä—å—ë\n\n"
    text += f"ü•ã –ë–∞–∑–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞: {basic_jutsu}\n\n"
    text += f"üìçüåé –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: {current_location}\n\n"
    text += f"üìù –ë–∏–æ–≥—Ä–∞—Ñ–∏—è:\n{biography}"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É 
    reply_markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="üëÄ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="profile_look_characteristics")
    button2 = types.InlineKeyboardButton(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="profile_look_inventory")
    reply_markup.add(button1)
    reply_markup.add(button2)
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup = reply_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
@bot.callback_query_handler(func=lambda call: call.data.startswith('profile_look_characteristics'))
def profile_look_characteristics(call):
    character = characters_collection.find_one({"telegram_id": call.message.chat.id})
    if not character:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ.")
        return
    
    text = f'''üìú –ò–º—è: {character["name"]}
    
üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
    ‚öîÔ∏è –ê—Ç–∞–∫–∞: {character["characteristics"][0]["atack"]}
    üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {character["characteristics"][0]["defense"]}
    ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {character["characteristics"][0]["health"]}
    üí´ –ß–∞–∫—Ä–∞: {character["characteristics"][0]["chakra"]}
    üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: {character["characteristics"][0]["speed"]}
    ü§∏ –õ–æ–≤–∫–æ—Å—Ç—å: {character["characteristics"][0]["dexterity"]}
    ‚ö°Ô∏è –ö—Ä–∏—Ç —à–∞–Ω—Å: {character["characteristics"][0]["—Åritical_chance"]}
    üçÄ –£–¥–∞—á–∞: {character["characteristics"][0]["luck"]}'''
    
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="show_my_character")
    reply_markup.add(button1)
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup = reply_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
@bot.message_handler(regexp='üë§ –ü—Ä–æ—Ñ–∏–ª—å')
def show_profile(message):
    user = users_collection.find_one({"telegram_id": message.from_user.id})
    character = characters_collection.find_one({"telegram_id": message.from_user.id})
    if not user:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    registration_date = user['registration_date'].strftime('%d.%m.%Y')

    #first_fandom = user['first_fandom']
    first_name = user['first_name']
    profile_text = f"üë§ {first_name}\nüÜî {message.from_user.id}\n\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
    
    reply_markup = types.InlineKeyboardMarkup()
    button_1 = types.InlineKeyboardButton(text="üìú –ú–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂", callback_data="show_my_character")
    reply_markup.add(button_1)
    
    bot.send_message(message.chat.id, profile_text, reply_markup = reply_markup)














# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"
@bot.callback_query_handler(func=lambda call: call.data.startswith('profile_look_inventory'))
def profile_look_inventory(call):
    character = characters_collection.find_one({"telegram_id": call.message.chat.id})
    if not character:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ.")
        return

    text_to_send = 'üéí –¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n\n'
    for item in character["inventory"][0].keys():
        count = character["inventory"][0][item][0]["count"]
        item_id = character["inventory"][0][item][0]["id"]
        text_to_send += f'‚ñ´Ô∏è {item}: {count} —à—Ç.\n/look_item_{item_id}\n'


    bot.send_message(call.message.chat.id, text_to_send)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "/look_item_"
@bot.message_handler(regexp='/look_item_')
def look_item_callback(message):
    item_id = message.text.split("_")[2]
    character = characters_collection.find_one({"telegram_id": message.chat.id})
    if not character:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ.")
        return
    item = None
    for category in character["inventory"]:
        for item_key, item_value in category.items():
            check_id = str(item_value[0].get('id'))
            if check_id == item_id:
                item = item_value
                item_name = item_key
                break
    if not item:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ.")
        return
    item_description = item[0]["description"]
    item_count = item[0]["count"]
    text_to_send = f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ:\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {item_name}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {item_description}\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {item_count} —à—Ç."
    bot.send_message(message.chat.id, text_to_send, parse_mode="HTML")












# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–≤–µ—Å—Ç–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@bot.message_handler(regexp='üó∫Ô∏è –ö–≤–µ—Å—Ç—ã')
def show_quests(message):
    user = users_collection.find_one({"telegram_id": message.from_user.id})
    character = characters_collection.find_one({"telegram_id": message.from_user.id})
    if not user:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    if not character:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    reply_markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="quests_look_[DAILYTASK]")
    button2 = types.InlineKeyboardButton(text="üìù –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="quests_look_[ACTIVETASK]")
    reply_markup.add(button1)
    reply_markup.add(button2)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ quests_look_[ACTIVETASK]
@bot.callback_query_handler(func=lambda call: call.data == 'quests_look_[ACTIVETASK]')
def quests_look_ACTIVETASK(call):
    user = users_collection.find_one({"telegram_id": call.message.chat.id})
    character = characters_collection.find_one({"telegram_id": call.message.chat.id})
    quests_player_info = quests_collection.find_one({"telegram_id": call.message.chat.id})
    if not user:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    active_quests = quests_player_info['list_of_active_quests']
    if not active_quests:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤.")
        return

    message = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:\n"
    quest_message = ''
    for quest in active_quests:
        quest_data = quests.base_quests[quest['name']]
        quest_message += f"üéØ {quest_data['name']}\n"
        quest_message += f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {quest_data['description']}\n\n"
        quest_message += "–£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
        for condition, value in quest_data['conditions_of_execution'].items():
            emoji = "‚úÖ" if value else "‚ùå"
            quest_message += f"- {emoji} {condition}\n"
        quest_message += "\n–ù–∞–≥—Ä–∞–¥—ã:\n"
        quest_message += f"- –û–ø—ã—Ç: {quest_data['rewards']['exp']} XP\n"
        quest_message += f"- –î–µ–Ω—å–≥–∏: {quest_data['rewards']['money']} üí∞\n"
        quest_message += "\n"
        try:
            if quest_data['rewards']['items']:
                quest_message += "- –ü—Ä–µ–¥–º–µ—Ç—ã:\n"
                for item, description in quest_data['rewards']['items'].items():
                    quest_message += f"\t- {item}: {description}\n"
        except:
            pass
        quest_message += "\n\n"
    bot.send_message(call.message.chat.id, f"{message}  {quest_message}") 













# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –∫–∞—Ä—Ç–µ
@bot.message_handler(regexp='üö∂‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
def show_current_character_location(message):
    user = users_collection.find_one({"telegram_id": message.from_user.id})
    character = characters_collection.find_one({"telegram_id": message.from_user.id})
    if not user:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    
    current_character_location = character["current_location"]
    

    reply_markup = types.InlineKeyboardMarkup()
    text_to_send = f'üó∫Ô∏è –ò–≥—Ä–æ–≤–∞—è –∫–∞—Ä—Ç–∞\n\nüìçüåé –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: {current_character_location}\n\n'
    if current_character_location in ['fire', 'water', 'wind', 'earth', 'lightning']:
        text_to_send += f'üßë‚Äç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ üåé {locations_map.base_countrys.get(current_character_location)["name"]}'
    elif current_character_location in locations_map.base_villages:
        text_to_send += f'üßë‚Äç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ üåé {locations_map.base_villages.get(current_character_location)["name"]}'
    
    location_in_village_list = ["academy", "main_square", "shopping_street", "small_training_ground", "market"]
    if any(location in current_character_location for location in location_in_village_list):
        if "academy" in current_character_location:
            text_to_send += f'üßë‚Äç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ê–∫–∞–¥–µ–º–∏–∏\n\n'
            text_to_send += messages.PLAYER_IN_ACADEMY_MESSAGE

            button_1 = types.InlineKeyboardButton(text=f'üéì –í—Å—Ç—É–ø–∏—Ç—å –≤ –∞–∫–∞–¥–µ–º–∏—é', callback_data=f'join_academy')
            reply_markup.add(button_1)
        if "market" in current_character_location:
            text_to_send += f'üßë‚Äç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–æ–∫–∞—Ü–∏–∏ –†—ã–Ω–æ–∫ \n\n'
            text_to_send += messages.PLAYER_IN_MARKET_MESSAGE
        
        
        

        
    
    
    button_1 = types.InlineKeyboardButton(text="üö∂‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è", callback_data="move_character")
    reply_markup.add(button_1)
    
    
    bot.send_message(message.chat.id, text_to_send, reply_markup = reply_markup)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ move_character
@bot.callback_query_handler(func=lambda call: call.data == 'move_character')
def move_character_callback(call):
    user = users_collection.find_one({"telegram_id": call.message.chat.id})
    character = characters_collection.find_one({"telegram_id": call.message.chat.id})
    if not user:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    current_character_location = character["current_location"]
    reply_markup = types.InlineKeyboardMarkup()

    text_to_send = f'üìçüåé –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: {current_character_location}\n\n'

    if current_character_location in locations_map.base_countrys:
        this_country = current_character_location.replace('_country', '')
        this_country_village = f'{this_country}_village'
        button_1 = types.InlineKeyboardButton(text=f'üö∂‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ {locations_map.base_villages.get(this_country_village)["name"]}', callback_data=f'move_character_to_{this_country_village}')
        reply_markup.add(button_1)

        for location_key, location_value in locations_map.base_countrys.items():
            if location_key == current_character_location:
                for location in location_value["locations"]:
                    button_1 = types.InlineKeyboardButton(text=f'üö∂‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ {location_value["locations"].get(location)}', callback_data=f'move_character_to_{location}')
                    reply_markup.add(button_1)

        text_to_send += f'–¢—ã –º–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –≤ {locations_map.base_villages.get(this_country_village)["name"]} –∏–ª–∏ –≤ –¥—Ä—É–≥—É—é –ª–æ–∫–∞—Ü–∏—é —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã'

    elif current_character_location in locations_map.base_villages:
        for location_key, location_value in locations_map.base_villages.items():
            if location_key == current_character_location:
                for location in location_value["locations"]:
                    button_1 = types.InlineKeyboardButton(text=f'üö∂‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ {location_value["locations"].get(location)}', callback_data=f'move_character_to_{location}')
                    reply_markup.add(button_1)
        button_2 = types.InlineKeyboardButton(text=f'üö∂‚Äç‚ôÇÔ∏è –í—ã–π—Ç–∏ –∏–∑ –¥–µ—Ä–µ–≤–Ω–∏', callback_data=f'move_character_to_current_country')
        reply_markup.add(button_2)

        text_to_send += f'–¢—ã –º–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –≤ –ª–æ–∫–∞—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ –î–µ—Ä–µ–≤–Ω–∏ –∏–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ –¥–µ—Ä–µ–≤–Ω–∏ (–æ–∫–∞–∂–µ—à—å—Å—è –≤ —Å—Ç—Ä–∞–Ω–µ)'

    location_in_country_list = ["big_training_ground", "daimyo_residence"]
    if any(location in current_character_location for location in location_in_country_list):
        button_1 = types.InlineKeyboardButton(text=f'üö∂‚Äç‚ôÇÔ∏è –í—ã–π—Ç–∏ –∏–∑ –ª–æ–∫–∞—Ü–∏–∏', callback_data=f'move_character_to_current_country')
        reply_markup.add(button_1)

        text_to_send += f'–¢—ã –º–æ–∂–µ—à—å –≤—ã–π—Ç–∏ –∏–∑ –ª–æ–∫–∞—Ü–∏–∏ (–æ–∫–∞–∂–µ—à—å—Å—è –≤ —Å—Ç—Ä–∞–Ω–µ)'

    location_in_village_list = ["academy", "main_square", "shopping_street", "small_training_ground", "market"]
    if any(location in current_character_location for location in location_in_village_list):
        button_1 = types.InlineKeyboardButton(text=f'üö∂‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –¥–µ—Ä–µ–≤–Ω—é', callback_data=f'move_character_to_current_village')
        button_2 = types.InlineKeyboardButton(text=f'üö∂‚Äç‚ôÇÔ∏è –í—ã–π—Ç–∏ –∏–∑ –¥–µ—Ä–µ–≤–Ω–∏', callback_data=f'move_character_to_current_country')
        reply_markup.add(button_1)
        reply_markup.add(button_2)

        text_to_send += f'–¢—ã –º–æ–∂–µ—à—å –≤—ã–π—Ç–∏ –∏–∑ –ª–æ–∫–∞—Ü–∏–∏ –î–µ—Ä–µ–≤–Ω–∏ –∏–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ –î–µ—Ä–µ–≤–Ω–∏ (–æ–∫–∞–∂–µ—à—å—Å—è –≤ —Å—Ç—Ä–∞–Ω–µ)'
    
    bot.send_message(call.message.chat.id, text_to_send, reply_markup = reply_markup)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ move_character_to
@bot.callback_query_handler(func=lambda call: call.data.startswith('move_character_to'))
def move_character_callback(call):
    user = users_collection.find_one({"telegram_id": call.message.chat.id})
    character = characters_collection.find_one({"telegram_id": call.message.chat.id})
    if not user:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    current_character_location = character["current_location"]
    location_to_move = call.data.replace('move_character_to_', '')
    
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text_to_send = f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å!\n\nüó∫Ô∏è –ò–≥—Ä–æ–≤–∞—è –∫–∞—Ä—Ç–∞\n\nüìçüåé –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: {location_to_move}'

    if location_to_move == 'current_village':
        location_to_move = current_character_location.split('_')[0]
        location_to_move = f"{location_to_move}_village"
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é (–ª–æ–∫–∞—Ü–∏—é) –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        characters_collection.update_one({"telegram_id": call.message.chat.id}, {"$set": {"current_location": location_to_move}})
    elif location_to_move == 'current_country':
        location_to_move = current_character_location.split('_')[0]
        location_to_move = f"{location_to_move}_country"
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é (–ª–æ–∫–∞—Ü–∏—é) –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        characters_collection.update_one({"telegram_id": call.message.chat.id}, {"$set": {"current_location": location_to_move}})
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é (–ª–æ–∫–∞—Ü–∏—é) –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        characters_collection.update_one({"telegram_id": call.message.chat.id}, {"$set": {"current_location": location_to_move}})
        
    reply_markup = types.InlineKeyboardMarkup()
    
    location_in_village_list = ["academy", "main_square", "shopping_street", "small_training_ground", "market"]
    if any(location in location_to_move for location in location_in_village_list):
        button_1 = types.InlineKeyboardButton(text="üëÄ –û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è", callback_data="look_current_location")
        reply_markup.add(button_1)
    
    button_1 = types.InlineKeyboardButton(text="üö∂‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è", callback_data="move_character")
    reply_markup.add(button_1)

    bot.send_message(call.message.chat.id, text_to_send, reply_markup = reply_markup)
    

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ look_current_location
@bot.callback_query_handler(func=lambda call: call.data.startswith('look_current_location'))
def look_current_location_callback(call):
    user = users_collection.find_one({"telegram_id": call.message.chat.id})
    character = characters_collection.find_one({"telegram_id": call.message.chat.id})
    if not user:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    current_character_location = character["current_location"]    
    
    reply_markup = types.InlineKeyboardMarkup()


    text_to_send = f'üó∫Ô∏è –ò–≥—Ä–æ–≤–∞—è –∫–∞—Ä—Ç–∞\n\nüìçüåé –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: {current_character_location}\n\n'
    if current_character_location in ['fire', 'water', 'wind', 'earth', 'lightning']:
        text_to_send += f'üßë‚Äç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ üåé {locations_map.base_countrys.get(current_character_location)["name"]}'
    elif current_character_location in locations_map.base_villages:
        text_to_send += f'üßë‚Äç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ üåé {locations_map.base_villages.get(current_character_location)["name"]}'
    
    location_in_village_list = ["academy", "main_square", "shopping_street", "small_training_ground", "market"]
    if any(location in current_character_location for location in location_in_village_list):
        if "academy" in current_character_location:
            text_to_send += f'üßë‚Äç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ê–∫–∞–¥–µ–º–∏–∏\n\n'
            text_to_send += messages.PLAYER_IN_ACADEMY_MESSAGE

            button_1 = types.InlineKeyboardButton(text=f'üéì –í—Å—Ç—É–ø–∏—Ç—å –≤ –∞–∫–∞–¥–µ–º–∏—é', callback_data=f'join_academy')
            reply_markup.add(button_1)
        if "market" in current_character_location:
            text_to_send += f'üßë‚Äç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–æ–∫–∞—Ü–∏–∏ –†—ã–Ω–æ–∫ \n\n'
            text_to_send += messages.PLAYER_IN_MARKET_MESSAGE
        if "small_training_ground" in current_character_location:
            text_to_send += f'üßë‚Äç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–æ–∫–∞—Ü–∏–∏ –ú–∞–ª–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –ø–ª–æ—â–∞–¥—å\n\n'
            text_to_send += messages.PLAYER_IN_SMALL_TRANING_GROUND_MESSAGE

    button_1 = types.InlineKeyboardButton(text="üö∂‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è", callback_data="move_character")
    reply_markup.add(button_1)
    
    
    bot.send_message(call.message.chat.id, text_to_send, reply_markup = reply_markup)










# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö
@bot.callback_query_handler(func=lambda call: call.data == 'info_show_current_locations')
def show_current_locations(call):
    try:
        user = users_collection.find_one({"telegram_id": call.message.chat.id})
        character = characters_collection.find_one({"telegram_id": call.message.chat.id})
        if not user:
            bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
            return
        
        reply_markup = types.InlineKeyboardMarkup()
        button_1 = types.InlineKeyboardButton(text="–°—Ç—Ä–∞–Ω—ã üåç", callback_data="show_current_locations[countrys]")
        button_2 = types.InlineKeyboardButton(text="–°–∫—Ä—ã—Ç—ã–µ –¥–µ—Ä–µ–≤–Ω–∏ üèûÔ∏è", callback_data="show_current_locations[villages]")
        reply_markup.add(button_1)
        reply_markup.add(button_2)
        
        bot.delete_message(call.message.chat.id, call.message.message_id)    
        bot.send_message(call.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:', reply_markup = reply_markup)
    except telebot.apihelper.ApiException as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        if "message to delete not found" in str(e):
            print("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", e)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ show_current_locations
@bot.callback_query_handler(func=lambda call: call.data.startswith('show_current_locations'))
def show_current_locations_callback(call):
    try:
        if call.data.startswith('show_current_locations[countrys]'):
            if call.data == 'show_current_locations[countrys]':
                reply_markup = types.InlineKeyboardMarkup()
                
                for country in locations_map.base_countrys:
                    button_1 = types.InlineKeyboardButton(text=f'üåç {locations_map.base_countrys.get(country)["name"]}', callback_data=f"show_current_locations[countrys]_{country}")
                    reply_markup.add(button_1)
                
                bot.delete_message(call.message.chat.id, call.message.message_id)  
                bot.send_message(call.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:', reply_markup = reply_markup)
                pass
            
            for country in locations_map.base_countrys:
                if call.data == f'show_current_locations[countrys]_{country}':
                    current_country = locations_map.base_countrys.get(country)
                    current_village = current_country["village"]
                    current_country_name = current_country["name"]
                    current_daimyo = current_country["daimyo"]

                    country_element = country.replace('_country', '')
                    
                    bot.delete_message(call.message.chat.id, call.message.message_id)  
                    bot.send_message(call.message.chat.id, f'üè∞ {current_country_name}\nüë§ –î–∞–π–º—ë: {current_daimyo} üó°Ô∏è\n\nüèõÔ∏è –õ–æ–∫–∞—Ü–∏–∏:\n    üèüÔ∏è {current_country["locations"][f"{country_element}_big_training_ground"]}\n    üèØ {current_country["locations"][f"{country_element}_daimyo_residence"]}')

        elif call.data.startswith('show_current_locations[villages]'):
            if call.data == 'show_current_locations[villages]':
                reply_markup = types.InlineKeyboardMarkup()
                for village in locations_map.base_villages:
                    village_name = locations_map.base_villages.get(village)["name"]
                        
                    button_1 = types.InlineKeyboardButton(text=f"üè° {village_name}", callback_data=f"show_current_locations[villages]_{village}")
                    reply_markup.add(button_1)

                bot.delete_message(call.message.chat.id, call.message.message_id)  
                bot.send_message(call.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:', reply_markup = reply_markup)
                pass
            
            
            for village in locations_map.base_villages:
                if call.data == f'show_current_locations[villages]_{village}':
                    this_country = village.replace('_village', '')
                    current_village = locations_map.base_villages.get(village)
                    
                    bot.delete_message(call.message.chat.id, call.message.message_id)  
                    bot.send_message(call.message.chat.id, f'üå≥ {current_village["name"]}\nüë§ –ö–∞–≥–µ: {current_village["kage"]} üó°Ô∏è\n\nüèõÔ∏è –õ–æ–∫–∞—Ü–∏–∏:\n    üè´ {current_village["locations"][f"{this_country}_academy"]}\n    üè¢ {current_village["locations"][f"{this_country}_main_square"]}\n    üõçÔ∏è {current_village["locations"][f"{this_country}_shopping_street"]}\n    ü•ä {current_village["locations"][f"{this_country}_small_training_ground"]}\n    üó≥Ô∏è {current_village["locations"][f"{this_country}_market"]}')
    except telebot.apihelper.ApiException as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        if "message to delete not found" in str(e):
            print("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", e)














# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–∞—Ö
@bot.callback_query_handler(func=lambda call: call.data == 'info_show_current_techniques')
def show_current_technique(call):
    try:
        user = users_collection.find_one({"telegram_id": call.message.chat.id})
        character = characters_collection.find_one({"telegram_id": call.message.chat.id})
        if not user:
            bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
            return

        techniques = techniques_collection.find()
        for current_technique in techniques:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ —á–∞–∫—Ä—ã
            if 'any' in current_technique['elements']:
                current_elements = '–õ—é–±–æ–π —Ç–∏–ø —á–∞–∫—Ä—ã'
            
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ –¥–∑—é—Ü—É
            if 'nin' in current_technique['jutsu_type']:
                jutsu_type = '–Ω–∏–Ω–¥–∑—é—Ü—É'
            elif 'gen' in current_technique['jutsu_type']:
                jutsu_type = '–≥–µ–Ω–¥–∑—é—Ü—É'
            elif 'tai' in current_technique['jutsu_type']:
                jutsu_type = '—Ç–∞–π–¥–∑—é—Ü—É'
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏    
            current_type_list = ''
            for current_type in current_technique['type']:
                if current_type in technique_type.technique_type_list:
                    current_type_list += f'‚Ü≥ {technique_type.technique_type_list[current_type]}\n'
            
            
            text_to_send = f"üìú –ù–∞–∑–≤–∞–Ω–∏–µ: {current_technique['name']}\nüèÖ –†–∞–Ω–≥: {current_technique['rank']}\n\nüìù {current_technique['description']}\n\nü•ã –¢–∏–ø –¥–∑—é—Ü—É: {jutsu_type}\n‚ú® –°—Ç–∏—Ö–∏—è: {current_elements}\n\nüí• –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏\n{current_type_list}"
            
            
            
            if 'gif' in current_technique:
                bot.send_document(call.message.chat.id, current_technique['gif'], caption=text_to_send)
            elif 'jpeg' in current_technique:
                bot.send_photo(call.message.chat.id, current_technique['jpeg'], caption = text_to_send)
    except telebot.apihelper.ApiException as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        if "message to delete not found" in str(e):
            print("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", e)






# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìÑ –°–ø—Ä–∞–≤–∫–∞"
@bot.message_handler(regexp='üìÑ –°–ø—Ä–∞–≤–∫–∞')
def show_current_technique(message):
    user = users_collection.find_one({"telegram_id": message.from_user.id})
    character = characters_collection.find_one({"telegram_id": message.from_user.id})
    if not user:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    reply_markup = types.InlineKeyboardMarkup()       
    button_1 = types.InlineKeyboardButton(text=f'üéÆ –¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏', callback_data=f"info_show_current_techniques")
    button_2 = types.InlineKeyboardButton(text=f'üó∫Ô∏è –¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏', callback_data=f"info_show_current_locations")
    reply_markup.add(button_1)
    reply_markup.add(button_2)
            
    bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:', reply_markup = reply_markup)
    pass





# settings 
@bot.message_handler(commands=['settings'])
def settings_handler(message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /settings
    pass
    
    
# help 
@bot.message_handler(commands=['help'])
def help_handler(message):
    bot.send_message(message.chat.id, messages.HELP_MESSAGE)
    pass



######################## –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ Exception #############################
def PrintException():
    exc_type, exc_obj, tb = sys.exc_info()
    f = tb.tb_frame
    lineno = tb.tb_lineno
    filename = f.f_code.co_filename
    linecache.checkcache(filename)
    line = linecache.getline(filename, lineno, f.f_globals)
    bot.send_message(config.OWNER_ID, 'LINE {} "{}")\n\n–¢–∏–ø –æ—à–∏–±–∫–∏: {}\n\n–û—à–∏–±–∫–∞: {}'.format(lineno, line.strip(), exc_type, exc_obj))


#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()